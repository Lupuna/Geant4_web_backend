"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import socket
import sys
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv
from loguru import logger

from core.loguru_handler import InterceptHandler

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!
load_dotenv()
SECRET_KEY = os.getenv('SECRET_KEY')
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
REGISTRATION_CONFIRM_SALT = os.getenv('REGISTRATION_CONFIRM_SALT')
PASSWORD_RECOVERY_SALT = os.getenv('PASSWORD_RECOVERY_SALT')
EMAIL_UPDATE_SALT = os.getenv('EMAIL_UPDATE_SALT')
DEBUG = os.getenv('IS_DEBUG', 'False').lower() in ('true', '1', 'yes')

ALLOWED_HOSTS = ["localhost", '127.0.0.1', 'web-app', '92.63.76.159', 'geant4-dev-frontend.tsu.ru']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'debug_toolbar',
    'drf_spectacular',
    'django_elasticsearch_dsl',
    'dbbackup',

    'api.apps.ApiConfig',
    'users.apps.UsersConfig',
    'geant_examples.apps.GeantExamplesConfig',
    'geant_documentation.apps.GeantDocumentationConfig',
    'cacheops',
    'utils',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "debug_toolbar.middleware.DebugToolbarMiddleware",
]
ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

ASGI_APPLICATION = 'core.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'api.jwt_authentication.JWTAuthenticationByCookie',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema'
}

SIMPLE_JWT = {

    'AUTH_TOKEN_CLASSES': (
        'rest_framework_simplejwt.tokens.AccessToken',
        'rest_framework_simplejwt.tokens.RefreshToken',
    ),

    'ROTATE_REFRESH_TOKENS': True,

    'BLACKLIST_AFTER_ROTATION': True,

    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),

    'REFRESH_TOKEN_LIFETIME': timedelta(days=90),

}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'users.auth.auth_backend.LoginByUsernameBackend',
]

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://:{REDIS_PASSWORD}@redis:6379",
        "OPTIONS": {
            "db": "1",
        },
    }
}
CACHE_LIVE_TIME = 60 * 60
CACHEOPS_REDIS = CACHES['default']['LOCATION']
CACHEOPS = {
    'users.user': {
        'ops': 'all',
        'timeout': CACHE_LIVE_TIME
    },
    'geant_examples.*': {
        'ops': 'all',
        'timeout': CACHE_LIVE_TIME
    },
    'geant_tests_storage.*': {
        'ops': 'all',
        'timeout': CACHE_LIVE_TIME
    },
    'geant_documentation.*': {
        'ops': 'all',
        'timeout': CACHE_LIVE_TIME
    }
}

CELERY_BROKER_URL = CACHES['default']['LOCATION']
CELERY_TASK_ALWAYS_EAGER = True
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = CACHES['default']['LOCATION']
CELERY_TIMEZONE = 'UTC'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'intercept': {
            '()': InterceptHandler,
            'level': 0,
        },
    },
    'loggers': {
        '': {
            'handlers': ['intercept'],
            'level': "ERROR",
            'propagate': True,
        },
    }
}

logger.remove()
logger.add(sys.stdout, level="DEBUG", backtrace=True)
logger.add(
    "logs/debug.log", level="DEBUG", backtrace=True,
    rotation="10 MB", retention="3 days",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {file}:{line} - {message}"
)

SPECTACULAR_SETTINGS = {
    'TITLE': 'API Schema',
    'DESCRIPTION': 'Guide for the REST API',
    'VERSION': '1.0.0',
}

INTERNAL_IPS = [
    "127.0.0.1",
]

hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
INTERNAL_IPS += [".".join(ip.split(".")[:-1] + ["1"]) for ip in ips]

STORAGE_URL = os.getenv('STORAGE_URL')
PATH_TO_LOCAL_STORAGE = os.getenv('PATH_TO_LOCAL_STORAGE')
WEB_BACKEND_URL = os.getenv('WEB_BACKEND_URL')
GEANT_BACKEND_URL = os.getenv('BACKEND_URL')
GEANT_BACKEND_RUN_EXAMPLE_URL = GEANT_BACKEND_URL + '/examples/run'
GEANT_BACKEND_GET_EXAMPLE_URL = GEANT_BACKEND_URL + "/examples/by/{title}"
GEANT_BACKEND_CREATE_EXAMPLE_URL = GEANT_BACKEND_URL + "/examples"
GEANT_BACKEND_DELETE_EXAMPLE_URL = GEANT_BACKEND_URL + "/examples/{id}"

FRONTEND_URL = os.getenv('FRONTEND_URL')

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_USE_TLS = False
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ELASTICSEARCH_DSL_AUTOSYNC = True
ELASTICSEARCH_ANALYZER_SETTINGS = {
    "filter": {
        "russian_stop": {
            "type": "stop",
            "stopwords": "_russian_"
        },
        "russian_stemmer": {
            "type": "stemmer",
            "language": "russian"
        },
        "edge_ngram_filter": {
            "type": "edge_ngram",
            "min_gram": 3,
            "max_gram": 10
        }
    },
    "analyzer": {
        "russian_analyzer": {
            "tokenizer": "standard",
            "filter": [
                "lowercase",
                "russian_stop",
                "russian_stemmer",
            ]
        },
        "english_analyzer": {
            "tokenizer": "standard",
            "filter": [
                "lowercase",
                "stop",
                "stemmer",
            ]
        },
        "edge_ngram_analyzer": {
            "tokenizer": "standard",
            "filter": [
                "lowercase",
                "edge_ngram_filter"
            ]
        }
    }
}

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'http://elasticsearch:9200'
    },
}

ELASTIC_PARAMS_CONF = {
    'documents': {
        'ExampleDocument': {
            'params': {
                'filter': [
                    'tags',
                    'category',
                ],
                'required_filter': {'synchronized': 'true'},
                'order': 'ordering',
                'search': 'query',
                'pagination': 'page'
            },
            'fields': [
                "description.english",
                "description.russian",
                "description",
                "title_verbose.english",
                "title_verbose.russian",
                "title_verbose",
                "title_verbose.keyword"
            ],
            'pagination_page_size': 10
        },
        'ArticleDocument': {
            'params': {
                'filter': [
                    'chapter',
                    'category',
                    'chosen',
                ],
                'search': 'query',
                'pagination': 'page'
            },
            'fields': [
                "description.english",
                "description.russian",
                "description",
                "title.english",
                "title.russian",
                "title"
            ],
            'pagination_page_size': 10
        },
        'UserExampleCommandDocument': {
            'params': {
                'filter': [
                    'tags',
                    'category',
                ],
                'required_filter': {'user': 'request.user.id'},
                'search': 'query',
                'order': 'ordering',
                'pagination': 'page'
            },
            'fields': [
                "description.english",
                "description.russian",
                "description",
                "title.english",
                "title.russian",
                "title"
            ],
            'pagination_page_size': 10
        }
    }
}

DBBACKUP_STORAGE = 'core.storage.BackupStorage'

CSRF_TRUSTED_ORIGINS = [
    'https://geant4-dev-frontend.tsu.ru:444',
    'https://92.63.76.159'
]
